# -*- coding: utf-8 -*-
"""
Created on Wed Mar 27 11:51:33 2019

@author: Ngawang Tenzin
"""

# Importing required PyQt5 class
import sys
from PyQt5.QtWidgets import QApplication, QMainWindow, QAction, QWidget, QVBoxLayout, QScrollArea, QFileDialog
from PyQt5.QtGui import QIcon

# Importing required Matplotlib and Numpy class
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar
from matplotlib.figure import Figure
from matplotlib import widgets
import matplotlib.pyplot as plt
import numpy as np

# Importing nibabel for Nifti files
import nibabel as nib

# Importing backend class for Image display and Image event
from jj_imdisplay import *
from jj_mpl_backend import *

# Main window class
class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.menuWindow()
        
    # Menubar function
    def menuWindow(self):
        # Set main window dimension and title
        self.setWindowIcon(QIcon('menuIcon/uomLog.png'))
        self.setWindowTitle('MP4 Medical Image Processor')
        self.setGeometry(300, 50, 650, 650)
        
        # Create main menu
        mainMenu = self.menuBar()
        basicMenu = mainMenu.addMenu('Basic')
        
        # Create submenu action and add to main menu
        niftiAct = QAction(QIcon('menuIcon/fileOpen.png'), 'Load Nifti', self)
        niftiAct.setShortcut('Ctrl+N')
        niftiAct.triggered.connect(self.loadNifti)
        basicMenu.addAction(niftiAct)
        
        

    # Extract pixel data from medical image file
    def loadNifti(self):
        #   Source: https://pydicom.github.io/pydicom/stable/auto_examples/input_output/plot_read_dicom.html
        try:
            filePath, _= QFileDialog.getOpenFileName(self, "Select Medical image", "", "Image Files (*.nii *.nii.gz)")
            niftiFile = nib.load(filePath)
            pixel_arr = niftiFile.get_fdata()
            
            tran_arr = pixel_arr.transpose(2, 1, 0)
            fron_arr = pixel_arr.transpose(1, 2, 0)
            sagi_arr = pixel_arr.transpose(0, 2, 1)
            
            self.vol_tran = np.flip(tran_arr)
            self.vol_fron = np.flip(fron_arr)
            self.vol_sagi = np.flip(sagi_arr)
            
            # Load static plot of images
            self.staticPlot()

        except:
            self.statusBar().showMessage("File type not supported or empty !!!", 2500)
            

    # Static initial plot
    def staticPlot(self):
        fig = Figure()
        canvas = FigureCanvas(fig)
        ax_tran = fig.add_subplot(221, adjustable='box', aspect='auto')
        ax_fron = fig.add_subplot(325, adjustable='box', aspect='auto')
        ax_sagi = fig.add_subplot(326, adjustable='box', aspect='auto')
    
        # index = vol_tran.shape[0] // 2
        imdis = ImageDisplay(self.vol_tran, self.vol_fron, self.vol_sagi, ax_tran, ax_fron, ax_sagi)
        imdis.initialize_transverse_display()
        imdis.initialize_frontal_display()
        imdis.initialize_sagittal_display()

        ctrl_sys = ControlSys(fig, imdis, self.vol_tran, self.vol_fron, self.vol_sagi, ax_tran, ax_fron, ax_sagi)
        
        self.setCentralWidget(canvas)

#        self.widget = QWidget()
#        self.setCentralWidget(self.widget)
#        self.widget.setLayout(QVBoxLayout())
#        
#        
#        self.toolbar = NavigationToolbar(self.canvas, self.widget)
#        self.widget.layout().addWidget(self.toolbar)
#        self.widget.layout().addWidget(self.canvas)
#        
#        
#        # Connect Mouse press event with buttonPressEvent function
#        self.canvas.mpl_connect('button_press_event', button_press_events)
    
    
        
# Start of main program to run
if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())
