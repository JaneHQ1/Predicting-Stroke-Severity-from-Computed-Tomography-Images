import sys
from PyQt5 import QtWidgets
from matplotlib import widgets
import nibabel as nib
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.backends.qt_compat import QtCore, QtWidgets
from matplotlib.figure import Figure
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg
from skimage import exposure

class contrast_adjust(object):
    def __init__(self, ax1, img):
        self.ax1 = ax1
        self.img = img
        self.im = None

    def initialize_display(self, ax1, img):
        if self.im is not None:
            self.im.remove()
        self.im = self.ax1.imshow(self.img, cmap="gray")

    def contrast_show(self, data):
        self.ax1.imshow(data, cmap="gray")

class ButtonControl:
    def __init__(self, fig):
        self.fig = fig

    def build_slider_bar(self, fig):
        barax = fig.add_axes([0.226, 0.01, 0.572, 0.03], facecolor='lightgoldenrodyellow')
        bar = widgets.Slider(barax, 'Contrast', 0, 100, valinit=0, valstep=2)
        return bar

class ControlSys(ButtonControl):
    def __init__(self, fig, img, contrast_view):
        self.fig = fig
        self.img = img
        self.contrast_view = contrast_view

        ButtonControl.__init__(self, fig)
        self.slider_bar = self.build_slider_bar(fig)
        self.slider_bar.on_changed(self.darkness_update)

    # def update_slider_bar(self, index):
    #     # self.slider_bar.set_val(index)
    #     # self.tran_view.update_display(int(index))
    #     self.tran_view.darkness_update(self.index)
    #     self.fig.canvas.draw_idle()

    def darkness_update(self, index):
        # index=self.slider_bar
        if index> 50:
            p_lo, p_hi = np.percentile(  self.img, (0,150-index))
        else:
            p_lo, p_hi = np.percentile(  self.img, (90-1.8*index,100))
        img_rescale_1 = exposure.rescale_intensity(img, in_range=(p_lo, p_hi))
        # self.ax1.imshow(self.img_rescale_1, cmap="gray")

        self.contrast_view.contrast_show(img_rescale_1)
        self.fig.canvas.draw_idle()

if __name__ == '__main__':
    path = r"C:\Users\Jin\Downloads\nifti_1\ARTERIELLE.nii"
    struct = nib.load(path)
    struct_arr = struct.get_fdata()
    img=struct_arr[50]
    app = QtWidgets.QApplication(sys.argv)
    win = QtWidgets.QMainWindow()
    fig = Figure()
    canvas = FigureCanvasQTAgg(fig)
    ax1 = fig.add_subplot(1, 1, 1)
    # ax1.imshow(img,cmap="gray")
    # ax_bright =fig.add_axes([0.226, 0.04, 0.572, 0.02], facecolor='lightgoldenrodyellow')
    # bright_index = widgets.Slider(ax_bright, 'brightness', 0, 100, valinit=0, valstep=2)
    #
    # contrast_view=contrast_adjust(ax1, img, bright_index)
    # contrast_view.initialize_display(ax1, img)

    contrast_view = contrast_adjust(ax1, img)
    contrast_view.initialize_display(ax1, img)
    # tran_view.update_display(0)
    ctrl_sys = ControlSys(fig, img, contrast_view)


    # contrast_view.darkness_update(bright_index)



    # ax2.imshow(darkness_update.img_rescale_1)


    win.setCentralWidget(canvas)
    win.show()
    sys.exit(app.exec_())





